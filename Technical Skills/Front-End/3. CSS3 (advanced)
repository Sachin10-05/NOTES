                                                           CSS3 (Cascading Style Sheet)
                                                           ****************************
                                                           
Advanced CSS
************
content:
--------
1. Gradient (Color Transition)
2. Filter
3. Shadows
4. Positioning
5. z-index
6. 2D-Transform
7. 3D-Transform
8. CSS Flex
9. CSS grid
10.CSS Responsiveness (Media Queries & Break-points)
11.CSS function & variables.
12.CSS Transition
13.CSS Animation





















1. Gradient:
------------
      * Color Transition.
      * It lets us display smooth transitions between two or more specified colors.
      * Types of gradients:-
          -- Linear gradient
          -- Radial gradient
          -- Conic gradient
          
      * Linear Gradient:
        ----------------
            * It goes up/down/left/right/diagonal
            * direction: default/specific-direction/with angle/using transparency)
            * syntax:
                  background-image:linear-gradient(direction, color-1, color-2,.......); ✔ 
                  Ex- background-image: linear-gradient(to right, red, blue);
                  
      * Radial Gradient:
        ----------------
            * It is defined by its center.
            * To define radial gradient we must define atleast two color stops.
            * syntax:
                  background-image: radial-gradient(shape size at pos, start-color, ......, last-color); ✔
                  Ex-  background-image: radial-gradient(circle, red 5%, green);
                  
      * Conic Gradient:
        ---------------
            * It is a gradient with color transitions rotated around a center path.
            * To define conic gradient we must define atleast two color.
            * syntax:
                  background-image:conic-gradient( [from angle] [at pos], color[degree],.......,color[degree]); ✔ 
                  Ex- background-image: conic-gradient(red 45deg, yellow 55deg);




















2. Filter:
-----------
      * The filter property defines visual effects (like blur and saturation) to an element (often <img>).
      * filter: grayscale(100%)                                   -----> It will make the image completely gray (used for black and white images). ✔ 
                drop-shadow(h-shadow v-shadow blur spread color)  -----> Applies a drop shadow effect to the image.                                ✔ 
                blur(px)                                          -----> Applies a blur effect to the image. A larger value will create more blur.
                brightness(%)                                     -----> Adjusts the brightness of the image.
                contrast(%);                                      -----> Adjusts the contrast of the image. 0% will make the image completely black.
                opacity(%)                                        -----> It descibes transparency-level, (0% == completely transparent) && (100% == no transparency).
                saturate(%)                                       -----> Saturates the image.
                hue-rotated()                                     -----> 
                url()              
                initial
                inherit
                none




















3. Shadows:
-----------
      * Text shadow:-
        ------------
            * It is applicable to texts only.
            * text-shadow: 2px 2px 4px red;                    ----->  (horizontal-shadow, vertical-shadow, blur-effect, color)
            * text-shadow: 2px 2px 4px red, 2px 4px red green; ----->  Multiple shadows 
            
      * Box shadow:-
        -----------
            * It is applied to one or more element.
            * box-shadow: 10px 10px 5px lightblue;             ----->  (horizontal-shadow, vertical-shadow, blur-effect, color)
            * box-shadow: 10px 10px 5px 12px lightblue inset;  ----->  (horizontal-shadow, vertical-shadow, blur-effect, spread-radius, color)
            
      * Note: * A positive spread-radius value increases the size of the shadow, a negative value decreases the size of the shadow.
              * The inset parameter changes the shadow from an outer shadow (outset) to an inner shadow.
              * Practical Ex- Cards.




















4. Positioning:
---------------
      * After using position property, elements are then positioned using the top, bottom, left, and right properties.
      * However, these properties will not work unless the position property is set first. 
      * Types:-
           (i)  static    :- Static positioned elements are not affected by the top, bottom, left, and right properties. (by default)
           (ii) fixed     :- It is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled.
           
           (iii)relative  :- It is positioned relative to its "normal (i.e, initial) position". ✔✔
           
           (iv) sticky : 
                    * It toggles between relative and fixed, depending on the scroll position. 
                    * In this case when element is in its normal pos then it will behave as 'RELATIVE' && if scrolled it will behave as 'FIXED'.
                    
           (v)  absolute : ✔✔
                    * It is positioned relative to the nearest positioned ancestor (INSTEAD OF position:relative; IS ALREADY WRITTEN). ✔✔
                    * However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
                    * Absolute positioned elements are removed from the normal flow, and can overlap elements.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
5. z-index:
-----------
      * It specifies the stack order of an element.
      * An element with greater stack order is always in front of an element with a lower stack order.
      
      * Note:-  
                * z-index only works on positioned elements (i.e, absolute, relative, fixed, or sticky)
                * z-index only works on flex items (elements that are direct children of display:flex elements).
                * If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. 




















6. 2D-Transform:
-----------------
      * CSS transforms allows us to move, rotate, scale, and skew elements.
      * Transform methods are not applicable to inline-elements so we should make first element as block-level element.
      * Also in case of inline-element we can add "position:absolute", then transform will work fine!
      
      * translate() -----> It moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
                           Ex- transform: translate(50px, 100px);
        
      * rotate()    -----> The rotate() method rotates an element clockwise or counter-clockwise according to a given degree.
                           Ex- transform: rotate(20deg);
        
      * scaleX()    ----->
      * scaleY()    ----->
      * scale()     -----> * Zoomed-Effect. ✔
                           * The scale() method increases or decreases the size of an element (according to the parameters given for the width and height). 
                           Ex- transform: scale(2, 3); ----------> It increases two times of its original width, and three times of its original height.
                           
      * skewX()
      * skewY()
      * skew()      -----> The skew() method skews (i.e, tilt) an element along the X and Y-axis by the given angles.
                           Ex- transform: skew(20deg, 10deg);
                           
      * matrix()    -----> * using matrix() method we can apply all above properties in one line.
                           * matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
                           Ex- transform: matrix(1, -0.3, 0, 1, 0, 0); 




















7. 3D-Transform:
-----------------
      * Here only z-axis is added, everything remains same.
      * To work on z-axis we need to add on 'perspective()'.
      
      * transform: translateX();
                   translateY();
                   translateZ();
                   
      * transform: rotateX();
                   rotateY();
                   rotateZ();
                   
      Ex- transform: perspective(15px) translateZ(-25px);
          transform: perspective(15px) scale(2) rotate(15deg);
          transform: rotateZ(150deg);    /* In case of rotation we do not need 'perspection()' */ ✔ 
          
          perspective: 15px;
          transform-style: preserve-3d; 




















8. CSS Flex:
------------
      * Flexbox is a CSS layout system that makes it easy to align and distribute items within a container using rows and columns.
      * 1D layout systems.
      * It contains two axis: i) main-axis  (Horizontal)
                              ii)cross-axis (vertical direction)
                              
                              
      * flex-container properties:
            * display:          flex;                                                                   -----> To use flex properties we need to mention it 1st.
            * flex-direction:   row, row-reverse, column, column-reverse;                               -----> It is used to change direction of main-axis. By default it is row.
            * flex-wrap:        wrap, nowrap, wrap-reverse;                                             -----> It specifies whether the flexible items should wrap or not. Basically here flex-items width are intact.
            * flex-flow:        row wrap;     			    		                                            -----> It is shorthand property for (flex-direction and flex-wrap). 
            * justify-content:  center, flex-start, flex-end, space-around, space-between, space-evenly -----> It is responsible for alignment in horizontal axis.  ✔ 
            * align-items:      center, flex-start, flex-end, stretch, baseline                         -----> It is responsible for alignment in vertical axis.    ✔ 
            * gap:              row_gap col_gap       (shorthand notation)                              -----> to handle gaps b/w flex-items.
            * align-content:    space-around/ space-between/ stretch/ center/ flex-start/ flex-end      -----> flex-items get aligned w.r.t cross-axis.
            
            
      * flex-items properties:
            * order       -----> It is used to change the order of flex-items. (order must be number, default is 0)
            * flex-grow   -----> It specifies how much a flex item will grow relative to the rest of the flex items. (order must be number, default is 0)
            * flex-shrink -----> It specifies how much a flex item will shrink relative to the rest of the flex items when we squeeze it. (The value must be a number, default value is 1).
            * flex-basis  -----> It specifies initial width of flex-items.also content inside flex item will not get trimmed instead flex-item width will change accordingly.
            * align-self  -----> It specifies the alignment for the selected item inside the flexible container.
            
            
      * Note: To pefectly center a flex-item:-
              justify-content: center;  /* Horizontally */
              align-items:center;       /* Vertically */




















9. 

































































