                                                           CSS3 (Cascading Style Sheet)
                                                           ****************************
                                                           
Advanced CSS
************
content:
--------
1. Gradient (Color Transition)
2. Filter
3. Shadows
4. Positioning
5. z-index
6. 2D-Transform
7. 3D-Transform
8. CSS Flex
9. CSS grid
10.CSS Responsiveness (Media Queries & Break-points)
11.CSS function & variables.
12.CSS Transition
13.CSS Animation





















1. Gradient:
------------
      * Color Transition.
      * It lets us display smooth transitions between two or more specified colors.
      * Types of gradients:-
          -- Linear gradient
          -- Radial gradient
          -- Conic gradient
          
      * Linear Gradient:
        ----------------
            * It goes up/down/left/right/diagonal
            * direction: default/specific-direction/with angle/using transparency)
            * syntax:
                  background-image:linear-gradient(direction, color-1, color-2,.......);  
                  Ex- background-image: linear-gradient(to right, red, blue);
                  
      * Radial Gradient:
        ----------------
            * It is defined by its center.
            * To define radial gradient we must define atleast two color stops.
            * syntax:
                  background-image: radial-gradient(shape size at pos, start-color, ......, last-color); 
                  Ex-  background-image: radial-gradient(circle, red 5%, green);
                  
      * Conic Gradient:
        ---------------
            * It is a gradient with color transitions rotated around a center path.
            * To define conic gradient we must define atleast two color.
            * syntax:
                  background-image:conic-gradient( [from angle] [at pos], color[degree],.......,color[degree]);  
                  Ex- background-image: conic-gradient(red 45deg, yellow 55deg);




















2. Filter:
-----------
      * The filter property defines visual effects (like blur and saturation) to an element (often <img>).
      * filter: grayscale(100%)                                   -----> It will make the image completely gray (used for black and white images). ✔ 
                drop-shadow(h-shadow v-shadow blur spread color)  -----> Applies a drop shadow effect to the image.                                ✔ 
                blur(px)                                          -----> Applies a blur effect to the image. A larger value will create more blur.
                brightness(%)                                     -----> Adjusts the brightness of the image.
                contrast(%);                                      -----> Adjusts the contrast of the image. 0% will make the image completely black.
                opacity(%)                                        -----> It descibes transparency-level, (0% == completely transparent) && (100% == no transparency).
                saturate(%)                                       -----> Saturates the image.
                hue-rotated()                                     -----> 
                url()              
                initial
                inherit
                none




















3. Shadows:
-----------
      * Text shadow:-
        ------------
            * It is applicable to texts only.
            * text-shadow: 2px 2px 4px red;                    ----->  (horizontal-shadow, vertical-shadow, blur-effect, color)
            * text-shadow: 2px 2px 4px red, 2px 4px red green; ----->  Multiple shadows 
            
      * Box shadow:-
        -----------
            * It is applied to one or more element.
            * box-shadow: 10px 10px 5px lightblue;             ----->  (horizontal-shadow, vertical-shadow, blur-effect, color)
            * box-shadow: 10px 10px 5px 12px lightblue inset;  ----->  (horizontal-shadow, vertical-shadow, blur-effect, spread-radius, color)
            
      * Note: * A positive spread-radius value increases the size of the shadow, a negative value decreases the size of the shadow.
              * The inset parameter changes the shadow from an outer shadow (outset) to an inner shadow.
              * Practical Ex- Cards.




















4. Positioning:
---------------
      * After using position property, elements are then positioned using the top, bottom, left, and right properties.
      * However, these properties will not work unless the position property is set first. 
      * Types:-
           (i)  static    :- Static positioned elements are not affected by the top, bottom, left, and right properties. (by default)
           (ii) fixed     :- It is positioned relative to the viewport, which means it always stays in the same place even if the page is scrolled.
           
           (iii)relative  :- It is positioned relative to its "normal (i.e, initial) position". ✔✔
           
           (iv) sticky : 
                    * It toggles between relative and fixed, depending on the scroll position. 
                    * In this case when element is in its normal pos then it will behave as 'RELATIVE' && if scrolled it will behave as 'FIXED'.
                    
           (v)  absolute : ✔✔
                    * It is positioned relative to the nearest positioned ancestor (INSTEAD OF position:relative; IS ALREADY WRITTEN). ✔✔
                    * However; if an absolute positioned element has no positioned ancestors, it uses the document body, and moves along with page scrolling.
                    * Absolute positioned elements are removed from the normal flow, and can overlap elements.
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
5. z-index:
-----------
      * It specifies the stack order of an element.
      * An element with greater stack order is always in front of an element with a lower stack order.
      
      * Note:-  
                * z-index only works on positioned elements (i.e, absolute, relative, fixed, or sticky)
                * z-index only works on flex items (elements that are direct children of display:flex elements).
                * If two positioned elements overlap without a z-index specified, the element positioned last in the HTML code will be shown on top. 




















6. 2D-Transform:
-----------------
      * CSS transforms allows us to move, rotate, scale, and skew elements.
      * Transform methods are not applicable to inline-elements so we should make first element as block-level element.
      * Also in case of inline-element we can add "position:absolute", then transform will work fine!
      
      * translate() -----> It moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
                           Ex- transform: translate(50px, 100px);
        
      * rotate()    -----> The rotate() method rotates an element clockwise or counter-clockwise according to a given degree.
                           Ex- transform: rotate(20deg);
        
      * scaleX()    ----->
      * scaleY()    ----->
      * scale()     -----> * Zoomed-Effect. ✔
                           * The scale() method increases or decreases the size of an element (according to the parameters given for the width and height). 
                           Ex- transform: scale(2, 3); ----------> It increases two times of its original width, and three times of its original height.
                           
      * skewX()
      * skewY()
      * skew()      -----> The skew() method skews (i.e, tilt) an element along the X and Y-axis by the given angles.
                           Ex- transform: skew(20deg, 10deg);
                           
      * matrix()    -----> * using matrix() method we can apply all above properties in one line.
                           * matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY())
                           Ex- transform: matrix(1, -0.3, 0, 1, 0, 0); 




















7. 3D-Transform:
-----------------
      * Here only z-axis is added, everything remains same.
      * To work on z-axis we need to add on 'perspective()'.
      
      * transform: translateX();
                   translateY();
                   translateZ();
                   
      * transform: rotateX();
                   rotateY();
                   rotateZ();
                   
      Ex- transform: perspective(15px) translateZ(-25px);
          transform: perspective(15px) scale(2) rotate(15deg);
          transform: rotateZ(150deg);    /* In case of rotation we do not need 'perspection()' */ ✔ 
          
          perspective: 15px;
          transform-style: preserve-3d; 




















8. CSS Flex:
------------
      * Flexbox is a CSS layout system that makes it easy to align and distribute items within a container using rows and columns.
      * 1D layout systems.
      * It contains two axis: i) main-axis  (Horizontal)
                              ii)cross-axis (vertical direction)
                              
                              
      * flex-container properties:
            * display:          flex;                                                                   -----> To use flex properties we need to mention it 1st.
            * flex-direction:   row, row-reverse, column, column-reverse;                               -----> It is used to change direction of main-axis. By default it is row.
            * flex-wrap:        wrap, nowrap, wrap-reverse;                                             -----> It specifies whether the flexible items should wrap or not. Basically here flex-items width are intact.
            * flex-flow:        row wrap;                                                               -----> It is shorthand property for (flex-direction and flex-wrap). 
            * justify-content:  center, flex-start, flex-end, space-around, space-between, space-evenly -----> It is responsible for alignment in horizontal axis.  ✔ 
            * align-items:      center, flex-start, flex-end, stretch, baseline                         -----> It is responsible for alignment in vertical axis.    ✔ 
            * gap:              row_gap col_gap       (shorthand notation)                              -----> to handle gaps b/w flex-items.
            * align-content:    space-around/ space-between/ stretch/ center/ flex-start/ flex-end      -----> flex-items get aligned w.r.t cross-axis.
            
            
      * flex-items properties:
            * order       -----> It is used to change the order of flex-items. (order must be number, default is 0)
            * flex-grow   -----> It specifies how much a flex item will grow relative to the rest of the flex items. (order must be number, default is 0)
            * flex-shrink -----> It specifies how much a flex item will shrink relative to the rest of the flex items when we squeeze it. (The value must be a number, default value is 1).
            * flex-basis  -----> It specifies initial width of flex-items.also content inside flex item will not get trimmed instead flex-item width will change accordingly.
            * align-self  -----> It specifies the alignment for the selected item inside the flexible container.
            
            
      * Note: To pefectly center a flex-item:-
              justify-content: center;  /* Horizontally */
              align-items:center;       /* Vertically */




















9. CSS grid:
------------
      * The CSS Grid Layout Module offers a 2D grid-based layout system, with rows and columns, making it easier to design web pages without having to use floats and positioning.
      * A grid layout consists of a parent element, with one or more child elements.
      * To use grid we need to include display:grid;
      * By defalut grid contains one column in top to bottom fashion.
      
      * grid-container properties:
        ---------------------------
              * display:  * grid;        -----> It creates block-level grid container.
                          * inline-grid; -----> It creates inline grid container.
                          
                          
              * row-gap: 20px;    -----> It sets gap between rows.
              * column-gap: 10px; -----> It sets gap between columns.
              * gap: 20px 10px;   -----> /* Shorthand */
              
              
              * grid-template-columns:  10px 10px 10px;  -----> No. of columns + width of each cols.
                                        auto auto auto;
                                        1fr 1fr 1fr;
                                        repeat(3, 1fr);
                                        
                                        
              * grid-template-rows: 5px auto 10px;                              -----> Here each value defines the height of the respective rows.
              * grid-template:  <grid-template-rows> | <grid-template-columns>; -----> /* Shorthand */
              
              
              * grid-auto-columns:  minmax(10px,auto) | auto | max-content | min-content | 10px; -----> It sets a default width of all columns. 
              * grid-auto-rows:     minmax(10px,auto) | auto | max-content | min-content | 25px; -----> It sets a default height of all rows.
              * grid-auto-flow:     row | column | row dense | column dense                                            					 
              
              
              * justify-content:  start | end | center | stretch | space-around | space-between | space-evenly; -----> It aligns grid-item in horizontal direction. ✔ 
              * align-content:    start | end | center | stretch | space-around | space-between | space-evenly; -----> It aligns grid-item in vertical direction.   ✔                
              * align-items:      start | end | center | stretch;                                               -----> It takes content width/height                ✔ 
              * place-items:      /* Shorthand (justify-content and align-content) */
              
              
              * grid-column-gap: 10px;      -----> It specifies the size of the gap between columns. ❌
              * grid-row-gap:    20px;      -----> It specifies the size of the gap between rows.    ❌ 
              * grid-gap:        20px 10px; ----->                                                   ❌ 
              
              
      * grid items/child properties:
        ----------------------------
              * All child properties behaves same like parent properties but diff is parent-properties is applied to all grid-items, 
                but using child-properties individual grid-items can be aligned.
                
              * jutify-self:	start | end | center | stretch	   -----> contents shift in Horizontal direction. ✔ 
              * align-self: 	start | end | center | stretch     -----> contents shift in Vertical direction.   ✔ 
              * place-self: /* Shorthand (justify-self and align-self) */
              
              * grid-column-start: 1;
              * grid-column-end:   3;	
              * grid-row-start: 1;	
              * grid-row-end:   3;
              * grid-column:  1 / 3       -----> /* Shorthand for (grid-column-start / grid-column-end) */
                              1 / span 2 
              * grid-row:     1 / 3       -----> /* Shorthand for (grid-row-start / grid-row-end ) */
                              1 / span 2 
              * grid-area:    1/3 / 1/3   -----> /* Shorthand for (grid-row / grid-column)*/


      * grid template areas:
        --------------------
              * container property.
              * The grid-template-areas property specifies areas within the grid layout.
              * You can name grid items by using the grid-area property, and then reference to the name in the grid-template-areas property.
              Ex- <div class="container">
                      <div class="box" id="header">Header</div>
                      <div class="box" id="sidebar">Sidebar</div>
                      <div class="box" id="content">Content</div>
                      <div class="box" id="footer">Footer</div>
                  </div>
                  
                  .container
                  {
                    height:700px;
                    border:1px solid red;
                    background-color:yellow;
                    display:grid;
                    grid-template-columns:200px 400px;
                    grid-template-rows:30px 500px 30px;
                    grid-template-areas:
                        "hd hd"
                        "side main"
                        "ft ft";
                  }
                  
                  .box {
                    border:1px solid green;
                    background-color:aqua;
                  }
                  
                  #header {
                    grid-area:hd;
                  }
                  
                  #sidebar {
                    grid-area:side;
                  }
                  
                  #content {
                    grid-area:main;
                  }
                  
                  #footer {
                    grid-area:ft;
                  } 


      * Nested Grid:
        ------------
              * It can be simply done using the display:grid; for both parent and child. ✔ 





















10. CSS Responsiveness (Media Queries & Break-points):
------------------------------------------------------
      * Viewport:   * The area of the window in which web content can be seen.
                    * we use the dimension of the viewport (usually the width, but sometimes the height) as the basis of our media queries.
                    
      * Media Queries are used to set different style for different screen sized devices.
      * we use breakpoints to set the condition of a media query.
      * Essentially, media query breakpoints are px value that a developer/designer can define in CSS. When a resposible website reaches those px value a transformation occurs so that a website offers an optimal user interface.
      * syntax: @media(feature: value) { }
                Ex- @media(min-width:600px) and (max-width:900px) { } 
                
      * Extra Large devices:  @media only screen and (min-width: 1200px) {...}      -----> Large Laptops/Desktops
      * Large devices:        @media only screen and (min-width: 992px)  {...}      -----> Laptops/Desktops
      * Medium devices:       @media only screen and (min-width: 768px)  {...}      -----> Landscape Tablets	  
      * Small devices:        @media only screen and (min-width: 600px)  {...}      -----> Portrait Tablets and Large Phones
      * Extra small devices:  @media only screen and (max-width: 600px)  {...}      -----> Phones.




















11. CSS function & variables:
-----------------------------
      * Function:-  calc(), minmax(), url(), etc.
        Variable:-  syntax: --var_name: value;
                    Ex-  :root() {
                            --color-1: #981a2c;
                         }
                         
                         .container {
                            backgrond-color: var(--color-1);
                         }
                         
      * Note: variable declared inside :root() are global variables and can be applied to entire document.




















12. CSS Transition:
-------------------
      * CSS transitions allows you to change property values smoothly, over a given duration.
      * Animation can be done either using transition or animation & keyframe.
      * To create a transition effect, you must specify two things:
        i) the CSS property you want to add an effect to.
        ii)the duration of the effect.
        
      * transition                       -----------> shorthand (t_property   t_duration   t_timing_func   t_delay)
      * transition-delay: 4ms;           -----------> It specifies a delay (in seconds) for the transition effect. 
      * transition-duration: 10s;        -----------> It specifies how many seconds or milliseconds a transition effect takes to complete.(mandatory)
      * transition-property: width;      -----------> kis property p hme lgani h transition.
      * transition-timing-function:-
              * ease        -----> Transition effect with a slow start, then fast, then end slowly (this is default)  
              * linear      -----> Transition effect with the same speed from start to end  ✔ 
              * ease-in     -----> Transition effect with a slow start                      ✔ 
              * ease-out    -----> Transition effect with a slow end                        ✔ 
              * ease-in-out -----> Transition effect with a slow start and end              ✔ 
              * cubic-bezier(n,n,n,n)
              
      * Ex- .box {
                transition: width 1s ease 2s;
                transition: transform 5s ease 1s;
            }
            
            .box:hover {
                width: 350px;
                transform: rotate(45deg);
                background-color: green;
            }
            
      * Ex- transition: all 0.5s; ✔✔




















13.CSS Animation:
------------------
      * An animation lets an element gradually change from one style to another.
      * To use CSS animation, you must first specify some keyframes for the animation. (@keyframes)
      * Keyframes hold what styles the element will have from starting to end at certain times.
      
      * animation-name: sachin;
      * animation-delay: 4ms;
      * animation-duration: 10s;
      * animation-timing-function: ease;
      * animation-iteration-count: 5;     -----> It specifies the number of times an animation should be played.
      * animation-fill-mode: both;
      * animation-play-state: running;
      * animation-direction: normal;
      
      * Ex-
        .container
        {
          width:100%;
          height:215px;
          background-color:green;
          border:3px solid red;
	      }
        
        .box
        {
          height:212px;
          width:212px;
          border:2px solid orange;
          background-color:aqua;
          animation-name:sachin;
          animation-duration:3s;
          animation-iteration-count:4;
          animation-timing-function:ease-in;
          animation-delay:1s;
          animation-direction: alternate;
        }
        
        @keyframes sachin {	
            from {
              width:212px;
            }
            to { 	
              width: 800px;
            }
        }
        
        
      * Note: Diff. b/w Transition and Animation:-
              *  The animation property allows you to change the properties of an element over a specific duration, while transition defines how an element changes over a specific duration.
              *  CSS transitions are generally best for simple from-to movements, while CSS animations are for more complex series of movements.
	

































































